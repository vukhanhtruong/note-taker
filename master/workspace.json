{
  "configuration" : { },
  "description" : "C4 Model for a simple note-taker application",
  "documentation" : {
    "decisions" : [ {
      "content" : "# 1. Use of TypeScript Across the Stack\n\nDate: 2024-12-12\n\n## Status\n\nAccepted (Proposed | Accepted | Deprecated)\n\n## Context\n\nBoth frontend (React) and backend (HonojS) are built using TypeScript. Adding type safety could help prevent runtime errors and improve the development experience by providing better tooling and code clarity.\n\n## Decision\n\nTypeScript will be used across the stack for both the frontend and backend.\n\n## Consequences\n\n- **Positive:** TypeScriptâ€™s static type checking helps catch errors early in the development process, improving code quality.\n- **Positive:** TypeScript enhances the developer experience with features like autocompletion, refactoring tools, and improved navigation.\n- **Positive:** Using TypeScript across the stack ensures consistency and better communication between frontend and backend teams.\n- **Negative:** TypeScript introduces an additional layer of complexity, and the team will need to manage type definitions and configurations, which might slow down initial development.\n",
      "date" : "2024-12-12T00:00:00Z",
      "format" : "Markdown",
      "id" : "1",
      "status" : "Accepted",
      "title" : "Use of TypeScript Across the Stack"
    }, {
      "content" : "# 2. Choosing Hono.js with Cloudflare Workers\n\nDate: 2024-12-12\n\n## Status\n\nAccepted\n\n## Context\n\nWe need a lightweight and fast web framework for our new note-taking application. The framework should support serverless deployment and be easy to work with for both development and deployment.\n\n## Decision\n\nHonoJS will be used for developing the Backend API.\n\n## Consequences\n\n- **Positive:** Hono.js is designed to be ultrafast, making it ideal for high-performance applications.\n- **Positive:** Using TypeScript with HonoJS ensures type safety and consistency.\n- **Positive:** Cloudflare Workers provide a scalable and reliable edge runtime, allowing us to deploy our application globally with low latency. These workers are functions running at the edge, meaning they are executed closer to the user for faster response times. Using Cloudflare Workers means we can focus on writing code without worrying about server management.\n\n- **Negative:** Need to ensure compatibility of chosen libraries with the Cloudflare Workers environment\n",
      "date" : "2024-12-12T00:00:00Z",
      "format" : "Markdown",
      "id" : "2",
      "status" : "Accepted",
      "title" : "Choosing Hono.js with Cloudflare Workers"
    }, {
      "content" : "# 3. Clean Architecture\n\nDate: 2024-12-12\n\n## Status\n\nAccepted\n\n### Context\n\nThe application needs to be maintainable, testable, and adaptable to future changes. The architecture should enforce separation of concerns, allowing independent development, testing, and scaling of different application layers (e.g., UI, business logic, data access).\n\n### Decision\n\nThe project will follow Clean Architecture principles.\n\n### Consequences\n\n- **Positive:** Clean Architecture promotes separation of concerns, making the system more maintainable and adaptable to changes.\n- **Positive:** The use of interfaces for dependency injection enables easier testing and the ability to swap implementations (e.g., database, external services) without affecting other layers.\n- **Positive:** The application is structured in layers, with the inner layers (business logic) being independent of outer layers (UI, frameworks, databases), ensuring that the core business logic is not tied to specific technologies.\n- **Negative:** Initial setup and understanding of the architecture might require more effort, especially for developers new to Clean Architecture.\n",
      "date" : "2024-12-12T00:00:00Z",
      "format" : "Markdown",
      "id" : "3",
      "status" : "Accepted",
      "title" : "Clean Architecture"
    }, {
      "content" : "# 4. API Design with RESTful Principles and OpenAPI Documentation\n\nDate: 2024-12-12\n\n## Status\n\nAccepted\n\n## Context\n\nThe application requires a well-defined interface for communication between the frontend and backend. The API should be easy to use, scalable, and adhere to web standards. Additionally, there is a need to ensure that the API is well-documented, standardized, and easy to integrate with other systems.\n\n## Decision\n\nThe API will be designed following RESTful principles and documented using the OpenAPI standard. Swagger will be used to generate and maintain the API documentation.\n\n## Consequences\n\n- **Positive:** A RESTful API design aligns with web standards and is widely understood, making it easier for frontend developers and external systems to interact with the backend.\n- **Positive:** RESTful APIs are stateless, which simplifies the server-side logic and improves scalability.\n- **Positive:** The use of OpenAPI ensures that the API is described in a standard format, which facilitates integration with other systems and tools.\n- **Positive:** Swagger provides an interactive API documentation interface, making it easier for developers to explore and test the API endpoints.\n- **Positive:** The use of OpenAPI and Swagger promotes consistency in API design, helps in generating client libraries, and ensures that the documentation stays up-to-date with the actual API implementation.\n- **Negative:** The additional step of maintaining OpenAPI documentation might introduce overhead, particularly if not automated as part of the development process.\n- **Negative:** Developers need to be familiar with OpenAPI specifications and Swagger tools, which could require some learning and adaptation time.\n\n### Implementation Details\n\n- **OpenAPI Specification:** The API will be described using the OpenAPI 3.0 specification. This will include defining endpoints, request/response formats, authentication mechanisms, and error codes.\n- **Swagger Integration:** Swagger will be integrated into the project to automatically generate API documentation from the OpenAPI specification. This documentation will be available for developers and external users to explore the API.\n- **Automation:** The OpenAPI documentation will be generated as part of the CI/CD pipeline to ensure it remains consistent with the actual API implementation.\n- **Client Libraries:** The OpenAPI specification can be used to generate client libraries in various programming languages, simplifying integration for external developers.\n\n### Tools and Technologies\n\n- **HonoJS with Swagger Module:** The HonoJS framework will utilize the [chanfana library](https://chanfana.pages.dev/routers/hono/) to generate the OpenAPI specification and Swagger UI.\n- **Swagger UI:** A self-hosted Swagger UI will be provided as part of the development environment for easy access to the API documentation.\n",
      "date" : "2024-12-12T00:00:00Z",
      "format" : "Markdown",
      "id" : "4",
      "status" : "Accepted",
      "title" : "API Design with RESTful Principles and OpenAPI Documentation"
    }, {
      "content" : "# 5. Use of React for Frontend Development\n\nDate: 2024-12-12\n\n## Status\n\nDeprecated\n\n### Context\n\nThe project requires a modern, responsive, and interactive frontend to provide a smooth user experience. The frontend needs to be maintainable, scalable, and capable of interacting efficiently with a RESTful API.\n\n### Decision\n\nReact will be used as the frontend framework for the web application.\n\n### Consequences\n\n- **Positive:** React's component-based architecture will help in building reusable UI components, improving code maintainability and reusability.\n- **Positive:** React has a strong ecosystem which can be used if the application grows in complexity.\n- **Positive:** React's virtual DOM provides efficient updates and rendering, which enhances the application's performance.\n- **Negative:** The learning curve for new developers might be steep if they are not familiar with React.\n",
      "date" : "2024-12-12T00:00:00Z",
      "format" : "Markdown",
      "id" : "5",
      "status" : "Deprecated",
      "title" : "Use of React for Frontend Development"
    }, {
      "content" : "# 6. Use of D1 database as serverless database platform\n\nDate: 2024-12-12\n\n## Status\n\nProposed\n\n## Context\n\n- App need a reliable and scalable database solution for our new project. The database should support serverless architecture, provide robust data management capabilities, and integrate seamlessly with our existing infrastructure.\n\n## Decision\n\nD1 which built on top of SQLite will be used as the database for the application.\n\n## Consequences\n\n- **Positive:** D1 supports serverless architecture, allowing us to build and deploy applications without managing underlying server infrastructure.\n- **Positive:** D1 is designed to handle high scalability, making it suitable for applications with varying loads and ensuring performance remains consistent.\n- **Positive:** The serverless nature of D1 can lead to cost savings, as we only pay for what we use, avoiding the need for over-provisioning.\n\n- **Negative:** D1, being based on SQLite, supports a limited set of data types compared to other databases like PostgreSQL or MySQL.\n",
      "date" : "2024-12-12T00:00:00Z",
      "format" : "Markdown",
      "id" : "6",
      "status" : "Proposed",
      "title" : "Use of D1 database as serverless database platform"
    } ],
    "sections" : [ {
      "content" : "# Note Taker Architecture\n\nThis site contains the C4 Model for a simple note-taking application\n",
      "filename" : "01-index.md",
      "format" : "Markdown",
      "order" : 1,
      "title" : ""
    }, {
      "content" : "# > Code-Level Class Diagram\n\nThe code designed by following Clean Architecture diagram, so the **color-code** is matter, pay attention please.\n\n![](/clean-arch.png)\n\nBelow are links to various code-level diagrams. Each link takes you to a dedicated page with detailed diagrams.\n\n- [User Diagram](/>>-user)\n- [Note Diagram](/>>-note)\n",
      "filename" : "02-class-diagrams.md",
      "format" : "Markdown",
      "order" : 2,
      "title" : ""
    }, {
      "content" : "# >> Note\n\nThis class diagram shows the code-level structure of the \"Create Note\" use case.\n\n```mermaid\nclassDiagram\n  direction TB\n  class Note {\n      + id: string\n      + title: string\n      + description: string\n      + createdBy: string\n      + archived: boolean\n  }\n\n  class CreateNewNoteUseCase {\n      + execute(payload: CreateNoteDTO): Note\n  }\n\n  class CreateNewNoteInteractor {\n      - noteRepository: NoteRepository\n      + execute(request: CreateNoteDTO): Note\n  }\n\n  class NoteRepository {\n      + getNoteById(id: UniqueID): Note;\n      + getNotesByUserId(userId: UniqueID): Note[];\n      + updateNote(note: Note): Note;\n      + deleteNote(id: UniqueID): Note;\n      + createNewNote(note: Note): Note;\n  }\n\n  class Controller {\n      + handle(request: Request): Response\n  }\n\n  class NoteRepositoryImplement {\n      + getNoteById(id: UniqueID): Note;\n      + getNotesByUserId(userId: UniqueID): Note[];\n      + updateNote(note: Note): Note;\n      + deleteNote(id: UniqueID): Note;\n      + createNewNote(note: Note): Note;\n  }\n\n  CreateNewNoteUseCase <|.. CreateNewNoteInteractor\n  CreateNewNoteInteractor --> NoteRepository : uses\n  CreateNewNoteInteractor --> Note : uses\n  Controller --> CreateNewNoteUseCase : invokes\n  NoteRepository <|.. NoteRepositoryImplement\n\n  %% Add custom class for styling\n  style Note fill:#ffffcc,stroke:#ffd700,stroke-width:2px\n  style CreateNewNoteUseCase fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style CreateNewNoteInteractor fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style NoteRepository fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style Controller fill:#ccffcc,stroke:#00ff00,stroke-width:2px\n  style NoteRepositoryImplement fill:#ccffcc,stroke:#00ff00,stroke-width:2px\n\n```\n",
      "filename" : "0201-note.md",
      "format" : "Markdown",
      "order" : 3,
      "title" : ""
    }, {
      "content" : "# >> User\n\nThis class diagram shows the code-level structure of the \"Sign-In\" and \"Sign-Up\" use case.\n\n```mermaid\nclassDiagram\n  direction TB\n\n  %% Domain Entity\n  class User {\n      + id: string\n      + name: string\n      + email: string\n      - password: string\n      + role: string\n      + activated: boolean\n      + comparePassword(password: string): boolean\n  }\n\n  %% Use Cases (Interfaces)\n  class SignUpUseCase {\n      + execute(email: string, password: string): User\n  }\n\n  class SignInUseCase {\n      + execute(email: string, password: string): User\n  }\n\n  %% Interactors (Implementation of Use Cases)\n  class SignUpInteractor {\n      - userRepository: UserRepository\n      + execute(email: string, password: string): User\n  }\n\n  class SignInInteractor {\n      - userRepository: UserRepository\n      + execute(email: string, password: string): User\n  }\n\n  %% Repository Interface\n  class UserRepository {\n      + create(user: User): User\n      + findByEmail(email: string): User\n  }\n\n  %% Controller & UserRepositoryImplement\n  class Controller {\n      + handleSignUp(request: Request): Response\n      + handleSignIn(request: Request): Response\n  }\n\n  class UserRepositoryImplement {\n      + create(user: User): User\n      + findByEmail(email: string): User\n  }\n\n  %% Relationships\n  SignUpUseCase <|.. SignUpInteractor\n  SignInUseCase <|.. SignInInteractor\n\n  SignUpInteractor --> UserRepository : uses\n  SignUpInteractor --> User : uses\n\n  SignInInteractor --> UserRepository : uses\n  SignInInteractor --> User : uses\n\n  Controller --> SignUpUseCase : invokes\n  Controller --> SignInUseCase : invokes\n\n  UserRepository <|.. UserRepositoryImplement\n\n  %% Styles\n  style User fill:#ffffcc,stroke:#ffd700,stroke-width:2px\n  style SignUpUseCase fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style SignInUseCase fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style SignUpInteractor fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style SignInInteractor fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style UserRepository fill:#ffcccc,stroke:#ff0000,stroke-width:2px\n  style Controller fill:#ccffcc,stroke:#00ff00,stroke-width:2px\n  style UserRepositoryImplement fill:#ccffcc,stroke:#00ff00,stroke-width:2px\n```\n",
      "filename" : "0202-user.md",
      "format" : "Markdown",
      "order" : 4,
      "title" : ""
    } ]
  },
  "id" : 0,
  "model" : {
    "people" : [ {
      "description" : "A person who writes, edits, and shares notes.",
      "id" : "1",
      "location" : "Unspecified",
      "name" : "User",
      "properties" : {
        "structurizr.dsl.identifier" : "user"
      },
      "relationships" : [ {
        "description" : "Uses via browser",
        "destinationId" : "3",
        "id" : "11",
        "properties" : {
          "structurizr.dsl.identifier" : "edc19e5d-4535-4465-8d6c-4c6182f11ba9"
        },
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Uses via browser",
        "destinationId" : "2",
        "id" : "12",
        "linkedRelationshipId" : "11",
        "sourceId" : "1"
      } ],
      "tags" : "Element,Person"
    } ],
    "softwareSystems" : [ {
      "containers" : [ {
        "description" : "A React SPA for user interactions.",
        "documentation" : { },
        "id" : "3",
        "name" : "React Frontend",
        "properties" : {
          "structurizr.dsl.identifier" : "webapp"
        },
        "relationships" : [ {
          "description" : "Sends requests (CRUD, Auth, Share)",
          "destinationId" : "4",
          "id" : "13",
          "properties" : {
            "structurizr.dsl.identifier" : "db63fbc8-027c-4484-848d-58a740fd197c"
          },
          "sourceId" : "3",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container",
        "technology" : "React, Browser"
      }, {
        "components" : [ {
          "description" : "Invokes use cases for notes.",
          "documentation" : { },
          "id" : "5",
          "name" : "Note Controller",
          "properties" : {
            "structurizr.dsl.identifier" : "notecontroller"
          },
          "relationships" : [ {
            "description" : "Invokes notes's use cases",
            "destinationId" : "7",
            "id" : "14",
            "properties" : {
              "structurizr.dsl.identifier" : "526e2321-fd01-4571-b0c8-fabce9dcbc7a"
            },
            "sourceId" : "5",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component",
          "technology" : "Hono"
        }, {
          "description" : "Invokes use cases for user authentication.",
          "documentation" : { },
          "id" : "6",
          "name" : "User Controller",
          "properties" : {
            "structurizr.dsl.identifier" : "usercontroller"
          },
          "relationships" : [ {
            "description" : "Invokes users's use cases",
            "destinationId" : "8",
            "id" : "15",
            "properties" : {
              "structurizr.dsl.identifier" : "763c27d7-61b4-41f5-a6c8-4403737e6efc"
            },
            "sourceId" : "6",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component",
          "technology" : "Hono"
        }, {
          "description" : "Implements use cases for note.",
          "documentation" : { },
          "id" : "7",
          "name" : "Note Module",
          "properties" : {
            "structurizr.dsl.identifier" : "notemodule"
          },
          "relationships" : [ {
            "destinationId" : "9",
            "id" : "16",
            "properties" : {
              "structurizr.dsl.identifier" : "c31284fe-b19b-4201-83c9-546f01892e37"
            },
            "sourceId" : "7",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component",
          "technology" : "Clean Architecture"
        }, {
          "description" : "Implements use cases for user.",
          "documentation" : { },
          "id" : "8",
          "name" : "User Module",
          "properties" : {
            "structurizr.dsl.identifier" : "usermodule"
          },
          "relationships" : [ {
            "destinationId" : "9",
            "id" : "17",
            "properties" : {
              "structurizr.dsl.identifier" : "615b4ea0-824f-4c1b-87ff-010c00f85dcd"
            },
            "sourceId" : "8",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component",
          "technology" : "Clean Architecture"
        }, {
          "description" : "Interacts with the D1 database.",
          "documentation" : { },
          "id" : "9",
          "name" : "Data Access Layer",
          "properties" : {
            "structurizr.dsl.identifier" : "componentdataaccess"
          },
          "relationships" : [ {
            "description" : "Executes queries",
            "destinationId" : "10",
            "id" : "19",
            "properties" : {
              "structurizr.dsl.identifier" : "e2a4c74c-15a3-41c0-b168-75e822845fcc"
            },
            "sourceId" : "9",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component",
          "technology" : "SQL Queries/ ORM /D1 SDK"
        } ],
        "description" : "Handles auth, note CRUD, and sharing.",
        "documentation" : { },
        "id" : "4",
        "name" : "Backend API",
        "properties" : {
          "structurizr.dsl.identifier" : "backend"
        },
        "relationships" : [ {
          "description" : "Executes queries",
          "destinationId" : "10",
          "id" : "20",
          "linkedRelationshipId" : "19",
          "sourceId" : "4"
        } ],
        "tags" : "Element,Container",
        "technology" : "Node.js, Hono, Cloudflare Workers"
      } ],
      "description" : "Allows users to sign up, sign in, and manage notes.",
      "documentation" : { },
      "group" : "Application",
      "id" : "2",
      "location" : "Unspecified",
      "name" : "Note Taker App",
      "properties" : {
        "structurizr.dsl.identifier" : "notetakersystem"
      },
      "relationships" : [ {
        "description" : "Connects",
        "destinationId" : "10",
        "id" : "18",
        "properties" : {
          "structurizr.dsl.identifier" : "54b531d9-d1dc-45e1-955d-dd5765c79b1e"
        },
        "sourceId" : "2",
        "tags" : "Relationship"
      } ],
      "tags" : "Element,Software System"
    }, {
      "description" : "Stores users, notes, and sharing.",
      "documentation" : { },
      "group" : "Application",
      "id" : "10",
      "location" : "Unspecified",
      "name" : "D1 Database",
      "properties" : {
        "structurizr.dsl.identifier" : "database"
      },
      "tags" : "Element,Software System,Cloudflare D1"
    } ]
  },
  "name" : "Note Taker App",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlICJOb3RlIFRha2VyIEFwcCIgIkM0IE1vZGVsIGZvciBhIHNpbXBsZSBub3RlLXRha2VyIGFwcGxpY2F0aW9uIiB7CgogICAgIWFkcnMgImFkcnMiCiAgICAhZG9jcyAiZG9jcyIKCiAgICBtb2RlbCB7CiAgICAgICAgdXNlciA9IHBlcnNvbiAiVXNlciIgIkEgcGVyc29uIHdobyB3cml0ZXMsIGVkaXRzLCBhbmQgc2hhcmVzIG5vdGVzLiIKICAgICAgICAKICAgICAgICBncm91cCAiQXBwbGljYXRpb24iIHsKCiAgICAgICAgICAgIG5vdGVUYWtlclN5c3RlbSA9IHNvZnR3YXJlU3lzdGVtICJOb3RlIFRha2VyIEFwcCIgIkFsbG93cyB1c2VycyB0byBzaWduIHVwLCBzaWduIGluLCBhbmQgbWFuYWdlIG5vdGVzLiIgewogICAgICAgICAgICAgICAgd2ViQXBwID0gY29udGFpbmVyICJSZWFjdCBGcm9udGVuZCIgIkEgUmVhY3QgU1BBIGZvciB1c2VyIGludGVyYWN0aW9ucy4iICJSZWFjdCwgQnJvd3NlciIKCiAgICAgICAgICAgICAgICBiYWNrZW5kID0gY29udGFpbmVyICJCYWNrZW5kIEFQSSIgIkhhbmRsZXMgYXV0aCwgbm90ZSBDUlVELCBhbmQgc2hhcmluZy4iICJOb2RlLmpzLCBIb25vLCBDbG91ZGZsYXJlIFdvcmtlcnMiIHsKCiAgICAgICAgICAgICAgICAgICAgbm90ZUNvbnRyb2xsZXIgPSBjb21wb25lbnQgIk5vdGUgQ29udHJvbGxlciIgIkludm9rZXMgdXNlIGNhc2VzIGZvciBub3Rlcy4iICJIb25vIgogICAgICAgICAgICAgICAgICAgIHVzZXJDb250cm9sbGVyID0gY29tcG9uZW50ICJVc2VyIENvbnRyb2xsZXIiICJJbnZva2VzIHVzZSBjYXNlcyBmb3IgdXNlciBhdXRoZW50aWNhdGlvbi4iICJIb25vIgoKICAgICAgICAgICAgICAgICAgICBub3RlTW9kdWxlID0gY29tcG9uZW50ICJOb3RlIE1vZHVsZSIgIkltcGxlbWVudHMgdXNlIGNhc2VzIGZvciBub3RlLiIgIkNsZWFuIEFyY2hpdGVjdHVyZSIKICAgICAgICAgICAgICAgICAgICB1c2VyTW9kdWxlID0gY29tcG9uZW50ICJVc2VyIE1vZHVsZSIgIkltcGxlbWVudHMgdXNlIGNhc2VzIGZvciB1c2VyLiIgIkNsZWFuIEFyY2hpdGVjdHVyZSIKCiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50RGF0YUFjY2VzcyA9IGNvbXBvbmVudCAiRGF0YSBBY2Nlc3MgTGF5ZXIiICJJbnRlcmFjdHMgd2l0aCB0aGUgRDEgZGF0YWJhc2UuIiAiU1FMIFF1ZXJpZXMvIE9STSAvRDEgU0RLIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBkYXRhYmFzZSA9IHNvZnR3YXJlU3lzdGVtICJEMSBEYXRhYmFzZSIgIlN0b3JlcyB1c2Vycywgbm90ZXMsIGFuZCBzaGFyaW5nLiIgIkNsb3VkZmxhcmUgRDEiCgogICAgICAgIH0KICAgICAgICAvLyBSZWxhdGlvbnNoaXBzCiAgICAgICAgdXNlciAtPiB3ZWJBcHAgIlVzZXMgdmlhIGJyb3dzZXIiCiAgICAgICAgd2ViQXBwIC0+IGJhY2tlbmQgIlNlbmRzIHJlcXVlc3RzIChDUlVELCBBdXRoLCBTaGFyZSkiCgogICAgICAgIG5vdGVDb250cm9sbGVyIC0+IG5vdGVNb2R1bGUgIkludm9rZXMgbm90ZXMncyB1c2UgY2FzZXMiCiAgICAgICAgdXNlckNvbnRyb2xsZXIgLT4gdXNlck1vZHVsZSAiSW52b2tlcyB1c2VycydzIHVzZSBjYXNlcyIKCiAgICAgICAgbm90ZU1vZHVsZSAtPiBjb21wb25lbnREYXRhQWNjZXNzIAogICAgICAgIHVzZXJNb2R1bGUgLT4gY29tcG9uZW50RGF0YUFjY2VzcyAKCiAgICAgICAgbm90ZVRha2VyU3lzdGVtIC0+IGRhdGFiYXNlICJDb25uZWN0cyIKICAgICAgICBjb21wb25lbnREYXRhQWNjZXNzIC0+IGRhdGFiYXNlICJFeGVjdXRlcyBxdWVyaWVzIgogICAgfQoKICAgIHZpZXdzIHsKICAgICAgICBzeXN0ZW1sYW5kc2NhcGUgIlN5c3RlbUxhbmRzY2FwZSIgewogICAgICAgICAgICBpbmNsdWRlICoKICAgICAgICAgICAgYXV0b0xheW91dAogICAgICAgIH0KCiAgICAgICAgc3lzdGVtY29udGV4dCBub3RlVGFrZXJTeXN0ZW0gIlN5c3RlbUNvbnRleHQiIHsKICAgICAgICAgICAgZGVzY3JpcHRpb24gIlN5c3RlbSBDb250ZXh0IGRpYWdyYW0gZm9yIHRoZSBOb3RlIFRha2VyIEFwcCIKICAgICAgICAgICAgaW5jbHVkZSAqCiAgICAgICAgICAgIGF1dG9MYXlvdXQKICAgICAgICB9CgogICAgICAgIGNvbnRhaW5lciBub3RlVGFrZXJTeXN0ZW0gIkNvbnRhaW5lcnMiIHsKICAgICAgICAgICAgZGVzY3JpcHRpb24gIkNvbnRhaW5lciBkaWFncmFtIHNob3dpbmcgbWFqb3IgZWxlbWVudHMiCiAgICAgICAgICAgIGluY2x1ZGUgKgogICAgICAgICAgICBhdXRvTGF5b3V0CiAgICAgICAgfQoKICAgICAgICBjb21wb25lbnQgYmFja2VuZCAiQmFja2VuZENvbXBvbmVudHMiIHsKICAgICAgICAgICAgZGVzY3JpcHRpb24gIkNvbXBvbmVudCBkaWFncmFtIGZvciB0aGUgQmFja2VuZCBBUEkiCiAgICAgICAgICAgIGluY2x1ZGUgKiAKICAgICAgICAgICAgYXV0b0xheW91dAogICAgICAgIH0KCgogICAgICAgIHN0eWxlcyB7CiAgICAgICAgICAgIGVsZW1lbnQgIlNvZnR3YXJlIFN5c3RlbSIgewogICAgICAgICAgICAgICAgYmFja2dyb3VuZCAjMTE2OGJkCiAgICAgICAgICAgICAgICBjb2xvciAjZmZmZmZmCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxlbWVudCAiUGVyc29uIiB7CiAgICAgICAgICAgICAgICBzaGFwZSBwZXJzb24KICAgICAgICAgICAgICAgIGJhY2tncm91bmQgIzA4NDI3QgogICAgICAgICAgICAgICAgY29sb3IgI2ZmZmZmZgogICAgICAgICAgICB9CgogICAgICAgICAgICBlbGVtZW50ICJTb2Z0d2FyZSBTeXN0ZW0iIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQgIzExNjhiZAogICAgICAgICAgICAgICAgY29sb3IgI2ZmZmZmZgogICAgICAgICAgICB9CgogICAgICAgICAgICBlbGVtZW50ICJDb250YWluZXIiIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQgIzQzOGRkNQogICAgICAgICAgICAgICAgY29sb3IgI2ZmZmZmZgogICAgICAgICAgICB9CgogICAgICAgICAgICBlbGVtZW50ICJDb21wb25lbnQiIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQgIzg1YmJmMAogICAgICAgICAgICAgICAgY29sb3IgIzAwMDAwMAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg=="
  },
  "views" : {
    "componentViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "containerId" : "4",
      "description" : "Component diagram for the Backend API",
      "elements" : [ {
        "id" : "5",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "6",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "7",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "8",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "9",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "10",
        "x" : 0,
        "y" : 0
      } ],
      "externalContainerBoundariesVisible" : false,
      "key" : "BackendComponents",
      "order" : 4,
      "relationships" : [ {
        "id" : "14"
      }, {
        "id" : "15"
      }, {
        "id" : "16"
      }, {
        "id" : "17"
      }, {
        "id" : "19"
      } ]
    } ],
    "configuration" : {
      "branding" : { },
      "styles" : {
        "elements" : [ {
          "background" : "#1168bd",
          "color" : "#ffffff",
          "tag" : "Software System"
        }, {
          "background" : "#08427b",
          "color" : "#ffffff",
          "shape" : "Person",
          "tag" : "Person"
        }, {
          "background" : "#438dd5",
          "color" : "#ffffff",
          "tag" : "Container"
        }, {
          "background" : "#85bbf0",
          "color" : "#000000",
          "tag" : "Component"
        } ]
      },
      "terminology" : { }
    },
    "containerViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "description" : "Container diagram showing major elements",
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "4",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "10",
        "x" : 0,
        "y" : 0
      } ],
      "externalSoftwareSystemBoundariesVisible" : false,
      "key" : "Containers",
      "order" : 3,
      "relationships" : [ {
        "id" : "11"
      }, {
        "id" : "13"
      }, {
        "id" : "20"
      } ],
      "softwareSystemId" : "2"
    } ],
    "systemContextViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "description" : "System Context diagram for the Note Taker App",
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "10",
        "x" : 0,
        "y" : 0
      } ],
      "enterpriseBoundaryVisible" : true,
      "key" : "SystemContext",
      "order" : 2,
      "relationships" : [ {
        "id" : "12"
      }, {
        "id" : "18"
      } ],
      "softwareSystemId" : "2"
    } ],
    "systemLandscapeViews" : [ {
      "automaticLayout" : {
        "applied" : false,
        "edgeSeparation" : 0,
        "implementation" : "Graphviz",
        "nodeSeparation" : 300,
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "vertices" : false
      },
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "10",
        "x" : 0,
        "y" : 0
      } ],
      "enterpriseBoundaryVisible" : true,
      "key" : "SystemLandscape",
      "order" : 1,
      "relationships" : [ {
        "id" : "12"
      }, {
        "id" : "18"
      } ]
    } ]
  }
}